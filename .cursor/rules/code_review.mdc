---
description: 
globs: 
alwaysApply: true
---
# Code Review Guidelines

1. Purpose
   - Improve code quality, correctness, and maintainability.
   - Share knowledge and ensure consistency.
   - Catch potential bugs and design flaws early.

2. Focus Areas
   - **Correctness:** Does the code do what it's intended to do? Does it handle edge cases?
   - **Readability:** Is the code clear, well-formatted, and easy to understand?
   - **Design:** Does the code follow established architectural patterns? Is it modular and extensible?
   - **Performance:** Are there obvious performance bottlenecks? Is resource usage efficient?
   - **Testing:** Are there sufficient tests? Do tests cover relevant scenarios?
   - **Documentation:** Is the code adequately documented? Is the documentation accurate?
   - **Safety:** Does the code adhere to Rust's safety principles? Is `unsafe` used appropriately?

3. Process
   - Keep Pull Requests (PRs) small and focused.
   - Provide clear descriptions and context for PRs.
   - Respond to review comments promptly.
   - Be constructive and respectful in reviews.
   - Aim for consensus, but the original author has the final say unless there are major issues.

4. Reviewer Responsibilities
   - Understand the context and goals of the changes.
   - Provide specific, actionable feedback.
   - Suggest improvements, not just point out flaws.
   - Verify that tests pass and cover the changes.

5. Author Responsibilities
   - Explain the changes clearly in the PR description.
   - Address all review comments, either by making changes or explaining why not.
   - Ensure the PR is merge-ready (passes CI, tests, etc.). 