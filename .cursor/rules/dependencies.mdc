# Dependency Management Rules

1. Selection
   - Prefer established and well-maintained crates.
   - Evaluate the security implications of adding a new dependency.
   - Consider the transitive dependencies introduced.
   - Justify the need for each dependency.

2. Versioning
   - Use specific version numbers in `Cargo.toml` (e.g., `1.2.3`) rather than overly broad ranges (e.g., `*`) for stability.
   - Use caret requirements (e.g., `^1.2.3`) for libraries where compatible API updates are expected.
   - Keep `Cargo.lock` checked into version control to ensure reproducible builds.

3. Updates
   - Regularly review and update dependencies (`cargo update`).
   - Test thoroughly after updating dependencies.
   - Be aware of breaking changes in dependency updates.

4. Features
   - Enable only the necessary features for each crate to minimize compile times and binary size.
   - Document why specific features are enabled.

5. Workspace Management (if applicable)
   - Define dependencies in the workspace `Cargo.toml` where possible.
   - Use path dependencies for local crates within the workspace.

6. Security Auditing
   - Use tools like `cargo audit` to check for known vulnerabilities in dependencies. 