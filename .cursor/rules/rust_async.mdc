---
description: 
globs: 
alwaysApply: true
---
# Rust Async Programming Standards

1. Tokio Usage
- Use tokio as the primary async runtime
- Properly handle task spawning and cancellation
- Use appropriate executor configurations
- Implement graceful shutdown patterns

2. Error Handling
- Use anyhow/thiserror for async error types
- Properly propagate errors across async boundaries
- Handle timeout and cancellation errors
- Provide context for async errors

3. Stream Processing
- Use Stream trait for async sequences
- Implement backpressure mechanisms
- Handle stream errors appropriately
- Use appropriate buffer sizes

4. Resource Management
- Clean up resources in drop implementations
- Use Arc/Mutex for shared state
- Implement proper timeout handling
- Use connection pooling where appropriate

5. Testing
- Use tokio test macros
- Test async timeouts and cancellation
- Mock async dependencies when needed
- Test concurrent access patterns

6. Performance
- Use appropriate channel types (mpsc, oneshot, broadcast)
- Avoid blocking operations in async contexts
- Use spawn_blocking for CPU-intensive tasks
- Monitor and tune task scheduling

7. Safety
- Handle all Future cancellation cases
- Properly synchronize shared state
- Use async traits with Send/Sync bounds
- Validate all async lifecycle events 