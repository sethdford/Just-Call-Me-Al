---
description: 
globs: 
alwaysApply: true
---
# Rust Code Standards

1. Code Organization
- Use modules to organize code logically
- Keep file sizes manageable (< 1000 lines)
- Use clear and descriptive names for types, functions, and variables
- Follow Rust naming conventions (snake_case for functions, PascalCase for types)

2. Error Handling
- Use Result and Option types appropriately
- Implement custom error types with thiserror when needed
- Provide descriptive error messages
- Use ? operator for error propagation
- Handle all potential error cases

3. Documentation
- Document public APIs with rustdoc comments
- Include examples in documentation where helpful
- Explain complex algorithms or business logic
- Keep documentation up to date with code changes

4. Testing
- Write unit tests for all public functions
- Use integration tests for complex workflows
- Test error cases and edge conditions
- Keep tests focused and descriptive
- Use test utilities and helpers when appropriate

5. Performance
- Use appropriate data structures
- Avoid unnecessary allocations
- Profile code when performance is critical
- Use async/await appropriately for I/O operations

6. Safety
- Avoid unsafe code unless absolutely necessary
- Document all unsafe blocks with safety guarantees
- Use strong typing to prevent runtime errors
- Validate all external input

7. Dependencies
- Keep dependencies minimal and up to date
- Review security implications of dependencies
- Use specific version numbers in Cargo.toml
- Document why each dependency is needed 