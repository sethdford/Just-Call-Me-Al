---
description: 
globs: 
alwaysApply: true
---
# New Feature Implementation Process

1. Requirements Gathering
   - Clearly define the goals and scope of the new feature.
   - Identify user needs and acceptance criteria.
   - Consider edge cases and potential error conditions.

2. Design
   - Outline the technical design for the feature.
   - Identify necessary changes to existing code or architecture.
   - Consider API design (if applicable).
   - Plan data models and storage (if applicable).

3. Implementation
   - Create a dedicated feature branch.
   - Implement the feature following project coding standards (see `rust_code.mdc`, `rust_async.mdc`, etc.).
   - Write unit and integration tests covering the new functionality.
   - Break down large features into smaller, manageable commits.

4. Documentation
   - Add or update documentation related to the new feature.
   - Include usage examples if appropriate.
   - Document any new APIs or configuration options.

5. Testing
   - Ensure all existing and new tests pass.
   - Perform manual testing if necessary to cover user workflows.
   - Test integration with other parts of the system.

6. Code Review
   - Create a Pull Request for the feature branch.
   - Request reviews from relevant team members.
   - Address feedback and iterate until the PR is approved.

7. Merging
   - Merge the feature branch into the main development branch once approved and CI passes.
   - Delete the feature branch after merging (optional, based on team policy). 