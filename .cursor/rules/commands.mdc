---
description: 
globs: 
alwaysApply: false
---
# Terminal Command Usage Rules

1. Safety First
   - Double-check commands that modify or delete files (`rm`, `mv`).
   - Be cautious with commands requiring `sudo` or root privileges.
   - Understand the impact of potentially long-running or resource-intensive commands.

2. Clarity and Intent
   - Prefer explicit commands over complex chains where possible.
   - Use comments (#) in scripts to explain non-obvious commands.
   - Use meaningful variable names in scripts.

3. Idempotency
   - Where possible, make scripts idempotent (running them multiple times produces the same result).
   - Use checks (e.g., `if [ -f file ]`) before creating or modifying resources.

4. Error Handling
   - Check exit codes (`$?` in bash/zsh) after critical commands in scripts.
   - Use `set -e` in shell scripts to exit immediately on error.
   - Provide informative error messages.

5. Git Commands
   - Follow Conventional Commits for commit messages (`<type>[scope]: <description>`).
   - Keep commits small and focused.
   - Use branches for feature development and bug fixes.
   - Rebase or merge appropriately based on team workflow.

6. Build/Test Commands
   - Use standard build commands (`cargo build`, `cargo test`, `cargo check`).
   - Use `cargo clippy` for linting.
   - Use `cargo fmt` for formatting.

7. Environment Management
   - Be aware of the current working directory (`pwd`).
   - Use relative paths where appropriate, absolute paths when necessary for clarity.
   - Manage environment variables carefully (e.g., using `.env` files and `dotenv`). 