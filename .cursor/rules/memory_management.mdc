---
description: 
globs: 
alwaysApply: true
---
# Rust Memory Management Rules

1. Ownership and Borrowing
   - Understand and leverage Rust's ownership system.
   - Prefer borrowing (`&`, `&mut`) over moving ownership where possible.
   - Use lifetimes explicitly when needed to guide the borrow checker.
   - Avoid unnecessary cloning; clone data deliberately.

2. Smart Pointers
   - Use `Box<T>` for heap allocation of single objects.
   - Use `Rc<T>` for multiple shared owners (single-threaded).
   - Use `Arc<T>` for multiple shared owners (multi-threaded).
   - Use `RefCell<T>` / `Mutex<T>` / `RwLock<T>` for interior mutability, understanding the associated costs and risks.

3. Collections
   - Choose appropriate collections (`Vec`, `HashMap`, `BTreeMap`, etc.) based on access patterns and performance needs.
   - Be mindful of collection capacity and reallocations; use `with_capacity` when the size is known.

4. Slices
   - Use slices (`&[T]`, `&str`) for viewing contiguous sequences of data without taking ownership.

5. Avoiding Memory Leaks
   - Be cautious of reference cycles when using `Rc` or `Arc`; use `Weak` pointers to break cycles.
   - Ensure resources (files, network connections, etc.) are properly closed (often handled by `Drop`).

6. `unsafe` Code
   - Avoid `unsafe` unless absolutely necessary and justified.
   - Encapsulate `unsafe` operations within safe abstractions.
   - Clearly document the safety invariants that must be upheld by callers of `unsafe` functions or users of types with `unsafe` internals. 