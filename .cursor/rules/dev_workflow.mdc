# Development Workflow Guidelines

1. Branching Strategy
   - Use a standard branching model (e.g., Gitflow, GitHub Flow).
   - Create feature branches off the main development branch (e.g., `main` or `develop`).
   - Name branches clearly (e.g., `feat/add-user-auth`, `fix/login-bug`).

2. Commits
   - Follow the Conventional Commits specification (`<type>[optional scope]: <description>`).
   - Make small, atomic commits that represent a single logical change.
   - Write clear and concise commit messages.

3. Code Reviews
   - All code should be reviewed before merging.
   - Create Pull Requests (PRs) for code review.
   - Address review comments before merging.

4. Testing
   - Write tests alongside new code.
   - Ensure all tests pass before creating a PR.
   - Run `cargo test` frequently during development.

5. Linting and Formatting
   - Run `cargo fmt` to format code before committing.
   - Run `cargo clippy` to check for lints and common mistakes.
   - Configure editor integration for automatic formatting and linting.

6. Continuous Integration (CI)
   - CI pipeline should automatically build, test, lint, and format code on each push/PR.
   - Ensure CI checks pass before merging.

7. Issue Tracking
   - Use an issue tracker (e.g., GitHub Issues) to manage tasks, features, and bugs.
   - Link commits and PRs to relevant issues. 