#[async_trait]
impl Vocoder for MimiVocoder {
    async fn synthesize_chunk(&self, tokens_tuple: (i64, Vec<i64>)) -> Result<Vec<i16>, ModelError> {
        // ... existing implementation ...
        info!("Synthesizing chunk...");
        // Example placeholder logic
        let num_samples = tokens_tuple.1.len() * 256; // Guessing based on tokens
        Ok(vec![0i16; num_samples])
    }

    fn sample_rate(&self) -> u32 {
        self.sample_rate
    }

    // Add the new method to handle multiple chunks
    async fn decode_tokens(&self, token_chunks: Vec<Vec<(i64, Vec<i64>)>>) -> Result<Vec<i16>, ModelError> {
        let mut all_samples = Vec::new();
        for chunk_vec in token_chunks {
            for token_tuple in chunk_vec {
                let samples = self.synthesize_chunk(token_tuple).await?;
                all_samples.extend(samples);
            }
        }
        Ok(all_samples)
    }
} 