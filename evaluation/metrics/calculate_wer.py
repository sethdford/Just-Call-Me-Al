import jiwer

def calculate_wer(reference: str, hypothesis: str) -> float:
    """Calculates the Word Error Rate (WER) between a reference and hypothesis string.

    Args:
        reference: The ground truth transcript.
        hypothesis: The transcript generated by ASR from synthesized audio.

    Returns:
        The calculated Word Error Rate (WER).
    """
    # Removed custom transformation pipeline - rely on jiwer's defaults
    # transformation = jiwer.Compose([
    #     jiwer.ToLowerCase(),
    #     jiwer.RemovePunctuation(),
    #     jiwer.RemoveMultipleSpaces(),
    #     jiwer.Strip()
    # ])

    # Calculate WER using default settings (should handle basic normalization and tokenization)
    wer_score = jiwer.wer(
        reference,              # Pass raw string
        hypothesis             # Pass raw string
        # truth_transform=transformation,
        # hypothesis_transform=transformation
    )

    return wer_score

if __name__ == '__main__':
    # Example Usage
    ref = "This is a test sentence."
    hyp = "this is a test sentence"
    wer = calculate_wer(ref, hyp)
    print(f"Reference: '{ref}'")
    print(f"Hypothesis: '{hyp}'")
    print(f"WER: {wer:.2f}")

    ref = "hello world"
    hyp = "hello there world"
    wer = calculate_wer(ref, hyp)
    print(f"Reference: '{ref}'")
    print(f"Hypothesis: '{hyp}'")
    print(f"WER: {wer:.2f}") # Expected: 0.5 (1 insertion / 2 words)

    ref = "quick brown fox"
    hyp = "quik brown foxx"
    wer = calculate_wer(ref, hyp)
    print(f"Reference: '{ref}'")
    print(f"Hypothesis: '{hyp}'")
    print(f"WER: {wer:.2f}") # Expected: 0.67 (2 substitutions / 3 words)

    ref = "Okay."
    hyp = "okay"
    wer = calculate_wer(ref, hyp)
    print(f"Reference: '{ref}'")
    print(f"Hypothesis: '{hyp}'")
    print(f"WER: {wer:.2f}") # Expected: 0.0
